package com.androidplot.xy;

import com.androidplot.series.XYSeries;

import java.util.List;


/**
 * A convenience class used to create instances of XYPlot generated from Lists of Numbers.
 * Note that SimpleXYSeries is not synchronized; never alter the underlying model of a SimpleXYSeries during a call to Plot.redraw() on a Plot with which
 * the SimpleXYSeries instance has been registered.  It is the developer's responsibility to implement the synchronization
 * mechanism(s) to accomplish this.
 */
public class SimpleXYSeries implements XYSeries {

    public enum ArrayFormat {
        Y_VALS_ONLY,
        XY_VALS_INTERLEAVED
    }

    private Number[] xVals = null;
    private Number[] yVals = null;
    //private Number[] zVals = null;

    private String title = null;
    //private Number minX  = null;
    //private Number maxX  = null;
    //private Number minY  = null;
    //private Number maxY  = null;


    public SimpleXYSeries(String title) {
        this.title = title;
    }
    /**
     * Generates an XYSeries instance from the List of numbers passed in.  This is a convenience class
     * and should only be used for static data models; it is not suitable for representing dynamically
     * changing data.
     *
     * @param model  A List of Number elements comprising the data model.
     * @param format Format of the model.  A format of Y_VALS_ONLY means that the array only contains y-values.
     *               For this format x values are autogenerated using values of 0 through n-1 where n is the size of the model.
     * @param title  Title of the series
     */
    public SimpleXYSeries(List<? extends Number> model, ArrayFormat format, String title) {
        this.title = title;
        setModel(model, format);
    }

    /**
     *
     * @param model A List of Number elements comprising the data model.
     * @param format Format of the model.  A format of Y_VALS_ONLY means that the array only contains y-values.
     *               For this format x values are autogenerated using values of 0 through n-1 where n is the size of the model.
     */
    public void setModel(List<? extends Number> model, ArrayFormat format) {
        //resetMinMax();
        if(model == null || model.size() == 0) {
            return;
        }

        switch (format) {

            // array containing only y-vals. assume x = index:
            case Y_VALS_ONLY:
                // always need an x and y array so init them now:
                xVals = new Number[model.size()];
                yVals = new Number[model.size()];
                for (int i = 0; i < model.size(); i++) {
                    xVals[i] = i;
                    yVals[i] = model.get(i);
                    //checkMinMax(i);
                }
                break;

            // xy interleaved array:
            case XY_VALS_INTERLEAVED:
                if (model.size() % 2 != 0) {
                    throw new IndexOutOfBoundsException("Cannot auto-generate series from odd-sized xy List.");
                }
                // always need an x and y array so init them now:
                int sz = model.size()/2;
                xVals = new Number[sz];
                yVals = new Number[sz];
                for (int i = 0, j = 0; i < sz; i++, j += 2) {
                    xVals[i] = model.get(j);
                    yVals[i] = model.get(j + 1);
                    //checkMinMax(j);
                }
                break;
            default:
                throw new IllegalArgumentException("Unexpected enum value: " + format);
        }
    }

    /**
     * Sets individual x value based on index
     * @param value
     * @param index
     */
    public void setX(Number value, int index) {
        //resetMinMax();
        // TODO
    }

    /**
     * Sets individual y value based on index
     * @param value
     * @param index
     */
    public void setY(Number value, int index) {
        //resetMinMax();
        // TODO
    }

    /*private void resetMinMax() {
        minX = null;
        maxX = null;
        minY = null;
        maxY = null;
    }*/

    /*private void checkMinMax(int index) {
        if (minX == null || xVals[index].doubleValue() < minX.doubleValue()) {
            minX = xVals[index];
        }

        if (maxX == null || xVals[index].doubleValue() > maxX.doubleValue()) {
            maxX = xVals[index];
        }

        if (minY == null || yVals[index].doubleValue() < minY.doubleValue()) {
            minY = yVals[index];
        }

        if (maxY == null || yVals[index].doubleValue() > maxY.doubleValue()) {
            maxY = yVals[index];
        }
    }*/

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public int size() {
        if(xVals != null) {
            return xVals.length;
        } else {
            return 0;
        }
    }


    /*@Override
    public void onReadBegin() {
        // unused
    }

    @Override
    public void onReadEnd() {
        // unused
    }*/

    @Override
    public Number getX(int index) {
        return xVals[index];
    }

    /*@Override
    public Number getMinX() {
        return minX;
    }

    @Override
    public Number getMaxX() {
        return maxX;
    }*/

    @Override
    public Number getY(int index) {
        return yVals[index];
    }

    /*@Override
    public Number getMinY() {
        return minY;
    }

    @Override
    public Number getMaxY() {
        return maxY;
    }*/
}
